{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PlatformPressable from \"./PlatformPressable\";\nvar DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nvar DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nvar TabBarItem = function (_React$Component) {\n  _inherits(TabBarItem, _React$Component);\n\n  var _super = _createSuper(TabBarItem);\n\n  function TabBarItem() {\n    var _this;\n\n    _classCallCheck(this, TabBarItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"getActiveOpacity\", function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return position.interpolate({\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 1 : 0;\n          })\n        });\n      } else {\n        return 1;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getInactiveOpacity\", function (position, routes, tabIndex) {\n      if (routes.length > 1) {\n        var inputRange = routes.map(function (_, i) {\n          return i;\n        });\n        return position.interpolate({\n          inputRange: inputRange,\n          outputRange: inputRange.map(function (i) {\n            return i === tabIndex ? 0 : 1;\n          })\n        });\n      } else {\n        return 0;\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(TabBarItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          route = _this$props.route,\n          position = _this$props.position,\n          navigationState = _this$props.navigationState,\n          renderLabelCustom = _this$props.renderLabel,\n          renderIcon = _this$props.renderIcon,\n          renderBadge = _this$props.renderBadge,\n          getLabelText = _this$props.getLabelText,\n          getTestID = _this$props.getTestID,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getAccessible = _this$props.getAccessible,\n          activeColorCustom = _this$props.activeColor,\n          inactiveColorCustom = _this$props.inactiveColor,\n          pressColor = _this$props.pressColor,\n          pressOpacity = _this$props.pressOpacity,\n          labelStyle = _this$props.labelStyle,\n          style = _this$props.style,\n          onLayout = _this$props.onLayout,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress;\n      var tabIndex = navigationState.routes.indexOf(route);\n      var isFocused = navigationState.index === tabIndex;\n      var labelColorFromStyle = StyleSheet.flatten(labelStyle || {}).color;\n      var activeColor = activeColorCustom !== undefined ? activeColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_ACTIVE_COLOR;\n      var inactiveColor = inactiveColorCustom !== undefined ? inactiveColorCustom : typeof labelColorFromStyle === 'string' ? labelColorFromStyle : DEFAULT_INACTIVE_COLOR;\n      var activeOpacity = this.getActiveOpacity(position, navigationState.routes, tabIndex);\n      var inactiveOpacity = this.getInactiveOpacity(position, navigationState.routes, tabIndex);\n      var icon = null;\n      var label = null;\n\n      if (renderIcon) {\n        var activeIcon = renderIcon({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveIcon = renderIcon({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n\n        if (inactiveIcon != null && activeIcon != null) {\n          icon = React.createElement(View, {\n            style: styles.icon\n          }, React.createElement(Animated.View, {\n            style: {\n              opacity: inactiveOpacity\n            }\n          }, inactiveIcon), React.createElement(Animated.View, {\n            style: [StyleSheet.absoluteFill, {\n              opacity: activeOpacity\n            }]\n          }, activeIcon));\n        }\n      }\n\n      var renderLabel = renderLabelCustom !== undefined ? renderLabelCustom : function (_ref) {\n        var route = _ref.route,\n            color = _ref.color;\n        var labelText = getLabelText({\n          route: route\n        });\n\n        if (typeof labelText === 'string') {\n          return React.createElement(Animated.Text, {\n            style: [styles.label, icon ? {\n              marginTop: 0\n            } : null, labelStyle, {\n              color: color\n            }]\n          }, labelText);\n        }\n\n        return labelText;\n      };\n\n      if (renderLabel) {\n        var activeLabel = renderLabel({\n          route: route,\n          focused: true,\n          color: activeColor\n        });\n        var inactiveLabel = renderLabel({\n          route: route,\n          focused: false,\n          color: inactiveColor\n        });\n        label = React.createElement(View, null, React.createElement(Animated.View, {\n          style: {\n            opacity: inactiveOpacity\n          }\n        }, inactiveLabel), React.createElement(Animated.View, {\n          style: [StyleSheet.absoluteFill, {\n            opacity: activeOpacity\n          }]\n        }, activeLabel));\n      }\n\n      var tabStyle = StyleSheet.flatten(style);\n      var isWidthSet = (tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width) !== undefined;\n      var tabContainerStyle = isWidthSet ? null : {\n        flex: 1\n      };\n      var scene = {\n        route: route\n      };\n      var accessibilityLabel = getAccessibilityLabel(scene);\n      accessibilityLabel = typeof accessibilityLabel !== 'undefined' ? accessibilityLabel : getLabelText(scene);\n      var badge = renderBadge ? renderBadge(scene) : null;\n      return React.createElement(PlatformPressable, {\n        android_ripple: {\n          borderless: true\n        },\n        testID: getTestID(scene),\n        accessible: getAccessible(scene),\n        accessibilityLabel: accessibilityLabel,\n        accessibilityRole: \"tab\",\n        accessibilityState: {\n          selected: isFocused\n        },\n        accessibilityStates: isFocused ? ['selected'] : [],\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        delayPressIn: 0,\n        onLayout: onLayout,\n        onPress: onPress,\n        onLongPress: onLongPress,\n        style: [styles.pressable, tabContainerStyle]\n      }, React.createElement(View, {\n        pointerEvents: \"none\",\n        style: [styles.item, tabStyle]\n      }, icon, label, badge != null ? React.createElement(View, {\n        style: styles.badge\n      }, badge) : null));\n    }\n  }]);\n\n  return TabBarItem;\n}(React.Component);\n\nexport { TabBarItem as default };\nvar styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n    textTransform: 'uppercase'\n  },\n  icon: {\n    margin: 2\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0\n  },\n  pressable: {\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","PlatformPressable","DEFAULT_ACTIVE_COLOR","DEFAULT_INACTIVE_COLOR","TabBarItem","args","_defineProperty","position","routes","tabIndex","length","inputRange","map","_","i","interpolate","outputRange","render","props","route","navigationState","renderLabelCustom","renderLabel","renderIcon","renderBadge","getLabelText","getTestID","getAccessibilityLabel","getAccessible","activeColorCustom","activeColor","inactiveColorCustom","inactiveColor","pressColor","pressOpacity","labelStyle","style","onLayout","onPress","onLongPress","indexOf","isFocused","index","labelColorFromStyle","StyleSheet","flatten","color","undefined","activeOpacity","getActiveOpacity","inactiveOpacity","getInactiveOpacity","icon","label","activeIcon","focused","inactiveIcon","View","styles","Animated","opacity","absoluteFill","labelText","Text","marginTop","activeLabel","inactiveLabel","tabStyle","isWidthSet","width","tabContainerStyle","flex","scene","accessibilityLabel","badge","android_ripple","borderless","testID","accessible","accessibilityRole","accessibilityState","selected","accessibilityStates","delayPressIn","pressable","pointerEvents","item","Component","create","margin","backgroundColor","textTransform","alignItems","justifyContent","padding","minHeight","top","right"],"sources":["TabBarItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  StyleProp,\n  LayoutChangeEvent,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport PlatformPressable from './PlatformPressable';\nimport type { Scene, Route, NavigationState } from './types';\n\nexport type Props<T extends Route> = {\n  position: Animated.AnimatedInterpolation;\n  route: T;\n  navigationState: NavigationState<T>;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderIcon?: (scene: {\n    route: T;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  onPress: () => void;\n  onLongPress: () => void;\n  labelStyle?: StyleProp<TextStyle>;\n  style: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_ACTIVE_COLOR = 'rgba(255, 255, 255, 1)';\nconst DEFAULT_INACTIVE_COLOR = 'rgba(255, 255, 255, 0.7)';\n\nexport default class TabBarItem<T extends Route> extends React.Component<\n  Props<T>\n> {\n  private getActiveOpacity = (\n    position: Animated.AnimatedInterpolation,\n    routes: Route[],\n    tabIndex: number\n  ) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_, i) => i);\n\n      return position.interpolate({\n        inputRange,\n        outputRange: inputRange.map((i) => (i === tabIndex ? 1 : 0)),\n      });\n    } else {\n      return 1;\n    }\n  };\n\n  private getInactiveOpacity = (\n    position: Animated.AnimatedInterpolation,\n    routes: Route[],\n    tabIndex: number\n  ) => {\n    if (routes.length > 1) {\n      const inputRange = routes.map((_: Route, i: number) => i);\n\n      return position.interpolate({\n        inputRange,\n        outputRange: inputRange.map((i: number) => (i === tabIndex ? 0 : 1)),\n      });\n    } else {\n      return 0;\n    }\n  };\n\n  render() {\n    const {\n      route,\n      position,\n      navigationState,\n      renderLabel: renderLabelCustom,\n      renderIcon,\n      renderBadge,\n      getLabelText,\n      getTestID,\n      getAccessibilityLabel,\n      getAccessible,\n      activeColor: activeColorCustom,\n      inactiveColor: inactiveColorCustom,\n      pressColor,\n      pressOpacity,\n      labelStyle,\n      style,\n      onLayout,\n      onPress,\n      onLongPress,\n    } = this.props;\n\n    const tabIndex = navigationState.routes.indexOf(route);\n    const isFocused = navigationState.index === tabIndex;\n\n    const labelColorFromStyle = StyleSheet.flatten(labelStyle || {}).color;\n\n    const activeColor =\n      activeColorCustom !== undefined\n        ? activeColorCustom\n        : typeof labelColorFromStyle === 'string'\n        ? labelColorFromStyle\n        : DEFAULT_ACTIVE_COLOR;\n    const inactiveColor =\n      inactiveColorCustom !== undefined\n        ? inactiveColorCustom\n        : typeof labelColorFromStyle === 'string'\n        ? labelColorFromStyle\n        : DEFAULT_INACTIVE_COLOR;\n\n    const activeOpacity = this.getActiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n    const inactiveOpacity = this.getInactiveOpacity(\n      position,\n      navigationState.routes,\n      tabIndex\n    );\n\n    let icon: React.ReactNode | null = null;\n    let label: React.ReactNode | null = null;\n\n    if (renderIcon) {\n      const activeIcon = renderIcon({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveIcon = renderIcon({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      if (inactiveIcon != null && activeIcon != null) {\n        icon = (\n          <View style={styles.icon}>\n            <Animated.View style={{ opacity: inactiveOpacity }}>\n              {inactiveIcon}\n            </Animated.View>\n            <Animated.View\n              style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n            >\n              {activeIcon}\n            </Animated.View>\n          </View>\n        );\n      }\n    }\n\n    const renderLabel =\n      renderLabelCustom !== undefined\n        ? renderLabelCustom\n        : ({ route, color }: { route: T; color: string }) => {\n            const labelText = getLabelText({ route });\n\n            if (typeof labelText === 'string') {\n              return (\n                <Animated.Text\n                  style={[\n                    styles.label,\n                    icon ? { marginTop: 0 } : null,\n                    labelStyle,\n                    { color },\n                  ]}\n                >\n                  {labelText}\n                </Animated.Text>\n              );\n            }\n\n            return labelText;\n          };\n\n    if (renderLabel) {\n      const activeLabel = renderLabel({\n        route,\n        focused: true,\n        color: activeColor,\n      });\n      const inactiveLabel = renderLabel({\n        route,\n        focused: false,\n        color: inactiveColor,\n      });\n\n      label = (\n        <View>\n          <Animated.View style={{ opacity: inactiveOpacity }}>\n            {inactiveLabel}\n          </Animated.View>\n          <Animated.View\n            style={[StyleSheet.absoluteFill, { opacity: activeOpacity }]}\n          >\n            {activeLabel}\n          </Animated.View>\n        </View>\n      );\n    }\n\n    const tabStyle = StyleSheet.flatten(style);\n    const isWidthSet = tabStyle?.width !== undefined;\n    const tabContainerStyle: ViewStyle | null = isWidthSet ? null : { flex: 1 };\n\n    const scene = { route };\n\n    let accessibilityLabel = getAccessibilityLabel(scene);\n\n    accessibilityLabel =\n      typeof accessibilityLabel !== 'undefined'\n        ? accessibilityLabel\n        : getLabelText(scene);\n\n    const badge = renderBadge ? renderBadge(scene) : null;\n\n    return (\n      <PlatformPressable\n        android_ripple={{ borderless: true }}\n        testID={getTestID(scene)}\n        accessible={getAccessible(scene)}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"tab\"\n        accessibilityState={{ selected: isFocused }}\n        // @ts-ignore: this is to support older React Native versions\n        accessibilityStates={isFocused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        delayPressIn={0}\n        onLayout={onLayout}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        style={[styles.pressable, tabContainerStyle]}\n      >\n        <View pointerEvents=\"none\" style={[styles.item, tabStyle]}>\n          {icon}\n          {label}\n          {badge != null ? <View style={styles.badge}>{badge}</View> : null}\n        </View>\n      </PlatformPressable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    margin: 4,\n    backgroundColor: 'transparent',\n    textTransform: 'uppercase',\n  },\n  icon: {\n    margin: 2,\n  },\n  item: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 10,\n    minHeight: 48,\n  },\n  badge: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  pressable: {\n    // The label is not pressable on Windows\n    // Adding backgroundColor: 'transparent' seems to fix it\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}