{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TabBarItem from \"./TabBarItem\";\nimport TabBarIndicator from \"./TabBarIndicator\";\n\nvar TabBar = function (_React$Component) {\n  _inherits(TabBar, _React$Component);\n\n  var _super = _createSuper(TabBar);\n\n  function TabBar() {\n    var _this;\n\n    _classCallCheck(this, TabBar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      layout: {\n        width: 0,\n        height: 0\n      },\n      tabWidths: {}\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"measuredTabWidths\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollAmount\", new Animated.Value(0));\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollViewRef\", React.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"getFlattenedTabWidth\", function (style) {\n      var tabStyle = StyleSheet.flatten(style);\n      return tabStyle ? tabStyle.width : undefined;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getComputedTabWidth\", function (index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n      if (flattenedWidth === 'auto') {\n        return tabWidths[routes[index].key] || 0;\n      }\n\n      switch (typeof flattenedWidth) {\n        case 'number':\n          return flattenedWidth;\n\n        case 'string':\n          if (flattenedWidth.endsWith('%')) {\n            var width = parseFloat(flattenedWidth);\n\n            if (Number.isFinite(width)) {\n              return layout.width * (width / 100);\n            }\n          }\n\n      }\n\n      if (scrollEnabled) {\n        return layout.width / 5 * 2;\n      }\n\n      return layout.width / routes.length;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getMaxScrollDistance\", function (tabBarWidth, layoutWidth) {\n      return tabBarWidth - layoutWidth;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTabBarWidth\", function (props, state) {\n      var layout = state.layout,\n          tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n          tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      return routes.reduce(function (acc, _, i) {\n        return acc + _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n      }, 0);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"normalizeScrollValue\", function (props, state, value) {\n      var layout = state.layout;\n\n      var tabBarWidth = _this.getTabBarWidth(props, state);\n\n      var maxDistance = _this.getMaxScrollDistance(tabBarWidth, layout.width);\n\n      var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n      if (Platform.OS === 'android' && I18nManager.isRTL) {\n        return maxDistance - scrollValue;\n      }\n\n      return scrollValue;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getScrollAmount\", function (props, state, index) {\n      var layout = state.layout,\n          tabWidths = state.tabWidths;\n      var scrollEnabled = props.scrollEnabled,\n          tabStyle = props.tabStyle;\n      var routes = props.navigationState.routes;\n      var centerDistance = Array.from({\n        length: index + 1\n      }).reduce(function (total, _, i) {\n        var tabWidth = _this.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this.getFlattenedTabWidth(tabStyle));\n\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      }, 0);\n      var scrollAmount = centerDistance - layout.width / 2;\n      return _this.normalizeScrollValue(props, state, scrollAmount);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetScroll\", function (index) {\n      if (_this.props.scrollEnabled) {\n        var _this$scrollViewRef$c;\n\n        (_this$scrollViewRef$c = _this.scrollViewRef.current) === null || _this$scrollViewRef$c === void 0 ? void 0 : _this$scrollViewRef$c.scrollTo({\n          x: _this.getScrollAmount(_this.props, _this.state, index),\n          animated: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (_this.state.layout.width === width && _this.state.layout.height === height) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getTranslateX\", function (scrollAmount, maxScrollDistance) {\n      return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1)) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n    });\n\n    return _this;\n  }\n\n  _createClass(TabBar, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var navigationState = this.props.navigationState;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          tabWidths = _this$state.tabWidths;\n\n      if (prevProps.navigationState.routes.length !== navigationState.routes.length || prevProps.navigationState.index !== navigationState.index || prevState.layout.width !== layout.width || prevState.tabWidths !== tabWidths) {\n        if (this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' && !(layout.width && navigationState.routes.every(function (r) {\n          return typeof tabWidths[r.key] === 'number';\n        }))) {\n          return;\n        }\n\n        this.resetScroll(navigationState.index);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          position = _this$props.position,\n          navigationState = _this$props.navigationState,\n          jumpTo = _this$props.jumpTo,\n          scrollEnabled = _this$props.scrollEnabled,\n          bounces = _this$props.bounces,\n          getAccessibilityLabel = _this$props.getAccessibilityLabel,\n          getAccessible = _this$props.getAccessible,\n          getLabelText = _this$props.getLabelText,\n          getTestID = _this$props.getTestID,\n          renderBadge = _this$props.renderBadge,\n          renderIcon = _this$props.renderIcon,\n          renderLabel = _this$props.renderLabel,\n          renderTabBarItem = _this$props.renderTabBarItem,\n          activeColor = _this$props.activeColor,\n          inactiveColor = _this$props.inactiveColor,\n          pressColor = _this$props.pressColor,\n          pressOpacity = _this$props.pressOpacity,\n          onTabPress = _this$props.onTabPress,\n          onTabLongPress = _this$props.onTabLongPress,\n          tabStyle = _this$props.tabStyle,\n          labelStyle = _this$props.labelStyle,\n          indicatorStyle = _this$props.indicatorStyle,\n          contentContainerStyle = _this$props.contentContainerStyle,\n          style = _this$props.style,\n          indicatorContainerStyle = _this$props.indicatorContainerStyle;\n      var _this$state2 = this.state,\n          layout = _this$state2.layout,\n          tabWidths = _this$state2.tabWidths;\n      var routes = navigationState.routes;\n      var isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n      var tabBarWidth = this.getTabBarWidth(this.props, this.state);\n      var tabBarWidthPercent = routes.length * 40 + \"%\";\n      var translateX = this.getTranslateX(this.scrollAmount, this.getMaxScrollDistance(tabBarWidth, layout.width));\n      return React.createElement(Animated.View, {\n        onLayout: this.handleLayout,\n        style: [styles.tabBar, style]\n      }, React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.indicatorContainer, scrollEnabled ? {\n          transform: [{\n            translateX: translateX\n          }]\n        } : null, tabBarWidth ? {\n          width: tabBarWidth\n        } : scrollEnabled ? {\n          width: tabBarWidthPercent\n        } : null, indicatorContainerStyle]\n      }, this.props.renderIndicator({\n        position: position,\n        layout: layout,\n        navigationState: navigationState,\n        jumpTo: jumpTo,\n        width: isWidthDynamic ? 'auto' : 100 / routes.length + \"%\",\n        style: indicatorStyle,\n        getTabWidth: function getTabWidth(i) {\n          return _this2.getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, _this2.getFlattenedTabWidth(tabStyle));\n        }\n      })), React.createElement(View, {\n        style: styles.scroll\n      }, React.createElement(Animated.ScrollView, {\n        horizontal: true,\n        accessibilityRole: \"tablist\",\n        keyboardShouldPersistTaps: \"handled\",\n        scrollEnabled: scrollEnabled,\n        bounces: bounces,\n        alwaysBounceHorizontal: false,\n        scrollsToTop: false,\n        showsHorizontalScrollIndicator: false,\n        automaticallyAdjustContentInsets: false,\n        overScrollMode: \"never\",\n        contentContainerStyle: [styles.tabContent, scrollEnabled ? {\n          width: tabBarWidth || tabBarWidthPercent\n        } : styles.container, contentContainerStyle],\n        scrollEventThrottle: 16,\n        onScroll: Animated.event([{\n          nativeEvent: {\n            contentOffset: {\n              x: this.scrollAmount\n            }\n          }\n        }], {\n          useNativeDriver: true\n        }),\n        ref: this.scrollViewRef\n      }, routes.map(function (route) {\n        var props = {\n          key: route.key,\n          position: position,\n          route: route,\n          navigationState: navigationState,\n          getAccessibilityLabel: getAccessibilityLabel,\n          getAccessible: getAccessible,\n          getLabelText: getLabelText,\n          getTestID: getTestID,\n          renderBadge: renderBadge,\n          renderIcon: renderIcon,\n          renderLabel: renderLabel,\n          activeColor: activeColor,\n          inactiveColor: inactiveColor,\n          pressColor: pressColor,\n          pressOpacity: pressOpacity,\n          onLayout: isWidthDynamic ? function (e) {\n            _this2.measuredTabWidths[route.key] = e.nativeEvent.layout.width;\n\n            if (routes.every(function (r) {\n              return typeof _this2.measuredTabWidths[r.key] === 'number';\n            })) {\n              _this2.setState({\n                tabWidths: _objectSpread({}, _this2.measuredTabWidths)\n              });\n            }\n          } : undefined,\n          onPress: function onPress() {\n            var event = {\n              route: route,\n              defaultPrevented: false,\n              preventDefault: function preventDefault() {\n                event.defaultPrevented = true;\n              }\n            };\n            onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n            if (event.defaultPrevented) {\n              return;\n            }\n\n            _this2.props.jumpTo(route.key);\n          },\n          onLongPress: function onLongPress() {\n            return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n              route: route\n            });\n          },\n          labelStyle: labelStyle,\n          style: tabStyle\n        };\n        return renderTabBarItem ? renderTabBarItem(props) : React.createElement(TabBarItem, props);\n      }))));\n    }\n  }]);\n\n  return TabBar;\n}(React.Component);\n\nexport { TabBar as default };\n\n_defineProperty(TabBar, \"defaultProps\", {\n  getLabelText: function getLabelText(_ref) {\n    var route = _ref.route;\n    return route.title;\n  },\n  getAccessible: function getAccessible(_ref2) {\n    var route = _ref2.route;\n    return typeof route.accessible !== 'undefined' ? route.accessible : true;\n  },\n  getAccessibilityLabel: function getAccessibilityLabel(_ref3) {\n    var route = _ref3.route;\n    return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n  },\n  getTestID: function getTestID(_ref4) {\n    var route = _ref4.route;\n    return route.testID;\n  },\n  renderIndicator: function renderIndicator(props) {\n    return React.createElement(TabBarIndicator, props);\n  }\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"mappings":"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","names":["React","TabBarItem","TabBarIndicator","TabBar","args","_defineProperty","layout","width","height","tabWidths","Animated","Value","createRef","style","tabStyle","StyleSheet","flatten","undefined","index","routes","scrollEnabled","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","tabBarWidth","layoutWidth","props","state","navigationState","reduce","acc","_","i","getComputedTabWidth","getFlattenedTabWidth","value","getTabBarWidth","maxDistance","getMaxScrollDistance","scrollValue","Math","max","min","Platform","OS","I18nManager","isRTL","centerDistance","Array","from","total","tabWidth","scrollAmount","normalizeScrollValue","scrollViewRef","current","scrollTo","x","getScrollAmount","animated","e","nativeEvent","setState","maxScrollDistance","multiply","add","componentDidUpdate","prevProps","prevState","every","r","resetScroll","render","position","jumpTo","bounces","getAccessibilityLabel","getAccessible","getLabelText","getTestID","renderBadge","renderIcon","renderLabel","renderTabBarItem","activeColor","inactiveColor","pressColor","pressOpacity","onTabPress","onTabLongPress","labelStyle","indicatorStyle","contentContainerStyle","indicatorContainerStyle","isWidthDynamic","tabBarWidthPercent","translateX","getTranslateX","View","onLayout","handleLayout","styles","tabBar","pointerEvents","indicatorContainer","transform","renderIndicator","getTabWidth","scroll","ScrollView","horizontal","accessibilityRole","keyboardShouldPersistTaps","alwaysBounceHorizontal","scrollsToTop","showsHorizontalScrollIndicator","automaticallyAdjustContentInsets","overScrollMode","tabContent","container","scrollEventThrottle","onScroll","event","contentOffset","useNativeDriver","ref","map","route","measuredTabWidths","onPress","defaultPrevented","preventDefault","onLongPress","Component","title","accessible","accessibilityLabel","testID","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"sources":["TabBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  ScrollView,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n} from 'react-native';\nimport TabBarItem, { Props as TabBarItemProps } from './TabBarItem';\nimport TabBarIndicator, { Props as IndicatorProps } from './TabBarIndicator';\nimport type {\n  Route,\n  Scene,\n  SceneRendererProps,\n  NavigationState,\n  Layout,\n  Event,\n} from './types';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText: (scene: Scene<T>) => string | undefined;\n  getAccessible: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel: (scene: Scene<T>) => string | undefined;\n  getTestID: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n};\n\ntype State = {\n  layout: Layout;\n  tabWidths: { [key: string]: number };\n};\n\nexport default class TabBar<T extends Route> extends React.Component<\n  Props<T>,\n  State\n> {\n  static defaultProps = {\n    getLabelText: ({ route }: Scene<Route>) => route.title,\n    getAccessible: ({ route }: Scene<Route>) =>\n      typeof route.accessible !== 'undefined' ? route.accessible : true,\n    getAccessibilityLabel: ({ route }: Scene<Route>) =>\n      typeof route.accessibilityLabel === 'string'\n        ? route.accessibilityLabel\n        : typeof route.title === 'string'\n        ? route.title\n        : undefined,\n    getTestID: ({ route }: Scene<Route>) => route.testID,\n    renderIndicator: (props: IndicatorProps<Route>) => (\n      <TabBarIndicator {...props} />\n    ),\n  };\n\n  state: State = {\n    layout: { width: 0, height: 0 },\n    tabWidths: {},\n  };\n\n  componentDidUpdate(prevProps: Props<T>, prevState: State) {\n    const { navigationState } = this.props;\n    const { layout, tabWidths } = this.state;\n\n    if (\n      prevProps.navigationState.routes.length !==\n        navigationState.routes.length ||\n      prevProps.navigationState.index !== navigationState.index ||\n      prevState.layout.width !== layout.width ||\n      prevState.tabWidths !== tabWidths\n    ) {\n      if (\n        this.getFlattenedTabWidth(this.props.tabStyle) === 'auto' &&\n        !(\n          layout.width &&\n          navigationState.routes.every(\n            (r) => typeof tabWidths[r.key] === 'number'\n          )\n        )\n      ) {\n        // When tab width is dynamic, only adjust the scroll once we have all tab widths and layout\n        return;\n      }\n\n      this.resetScroll(navigationState.index);\n    }\n  }\n\n  // to store the layout.width of each tab\n  // when all onLayout's are fired, this would be set in state\n  private measuredTabWidths: { [key: string]: number } = {};\n\n  private scrollAmount = new Animated.Value(0);\n\n  private scrollViewRef = React.createRef<ScrollView>();\n\n  private getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n    const tabStyle = StyleSheet.flatten(style);\n\n    return tabStyle ? tabStyle.width : undefined;\n  };\n\n  private getComputedTabWidth = (\n    index: number,\n    layout: Layout,\n    routes: Route[],\n    scrollEnabled: boolean | undefined,\n    tabWidths: { [key: string]: number },\n    flattenedWidth: string | number | undefined\n  ) => {\n    if (flattenedWidth === 'auto') {\n      return tabWidths[routes[index].key] || 0;\n    }\n\n    switch (typeof flattenedWidth) {\n      case 'number':\n        return flattenedWidth;\n      case 'string':\n        if (flattenedWidth.endsWith('%')) {\n          const width = parseFloat(flattenedWidth);\n          if (Number.isFinite(width)) {\n            return layout.width * (width / 100);\n          }\n        }\n    }\n\n    if (scrollEnabled) {\n      return (layout.width / 5) * 2;\n    }\n\n    return layout.width / routes.length;\n  };\n\n  private getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n    tabBarWidth - layoutWidth;\n\n  private getTabBarWidth = (props: Props<T>, state: State) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    return routes.reduce<number>(\n      (acc, _, i) =>\n        acc +\n        this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        ),\n      0\n    );\n  };\n\n  private normalizeScrollValue = (\n    props: Props<T>,\n    state: State,\n    value: number\n  ) => {\n    const { layout } = state;\n    const tabBarWidth = this.getTabBarWidth(props, state);\n    const maxDistance = this.getMaxScrollDistance(tabBarWidth, layout.width);\n    const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n    if (Platform.OS === 'android' && I18nManager.isRTL) {\n      // On Android, scroll value is not applied in reverse in RTL\n      // so we need to manually adjust it to apply correct value\n      return maxDistance - scrollValue;\n    }\n\n    return scrollValue;\n  };\n\n  private getScrollAmount = (props: Props<T>, state: State, index: number) => {\n    const { layout, tabWidths } = state;\n    const { scrollEnabled, tabStyle } = props;\n    const { routes } = props.navigationState;\n\n    const centerDistance = Array.from({ length: index + 1 }).reduce<number>(\n      (total, _, i) => {\n        const tabWidth = this.getComputedTabWidth(\n          i,\n          layout,\n          routes,\n          scrollEnabled,\n          tabWidths,\n          this.getFlattenedTabWidth(tabStyle)\n        );\n\n        // To get the current index centered we adjust scroll amount by width of indexes\n        // 0 through (i - 1) and add half the width of current index i\n        return total + (index === i ? tabWidth / 2 : tabWidth);\n      },\n      0\n    );\n\n    const scrollAmount = centerDistance - layout.width / 2;\n\n    return this.normalizeScrollValue(props, state, scrollAmount);\n  };\n\n  private resetScroll = (index: number) => {\n    if (this.props.scrollEnabled) {\n      this.scrollViewRef.current?.scrollTo({\n        x: this.getScrollAmount(this.props, this.state, index),\n        animated: true,\n      });\n    }\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    if (\n      this.state.layout.width === width &&\n      this.state.layout.height === height\n    ) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n      },\n    });\n  };\n\n  private getTranslateX = (\n    scrollAmount: Animated.Value,\n    maxScrollDistance: number\n  ) =>\n    Animated.multiply(\n      Platform.OS === 'android' && I18nManager.isRTL\n        ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1))\n        : scrollAmount,\n      I18nManager.isRTL ? 1 : -1\n    );\n\n  render() {\n    const {\n      position,\n      navigationState,\n      jumpTo,\n      scrollEnabled,\n      bounces,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      activeColor,\n      inactiveColor,\n      pressColor,\n      pressOpacity,\n      onTabPress,\n      onTabLongPress,\n      tabStyle,\n      labelStyle,\n      indicatorStyle,\n      contentContainerStyle,\n      style,\n      indicatorContainerStyle,\n    } = this.props;\n    const { layout, tabWidths } = this.state;\n    const { routes } = navigationState;\n\n    const isWidthDynamic = this.getFlattenedTabWidth(tabStyle) === 'auto';\n    const tabBarWidth = this.getTabBarWidth(this.props, this.state);\n    const tabBarWidthPercent = `${routes.length * 40}%`;\n    const translateX = this.getTranslateX(\n      this.scrollAmount,\n      this.getMaxScrollDistance(tabBarWidth, layout.width)\n    );\n\n    return (\n      <Animated.View\n        onLayout={this.handleLayout}\n        style={[styles.tabBar, style]}\n      >\n        <Animated.View\n          pointerEvents=\"none\"\n          style={[\n            styles.indicatorContainer,\n            scrollEnabled ? { transform: [{ translateX }] as any } : null,\n            tabBarWidth\n              ? { width: tabBarWidth }\n              : scrollEnabled\n              ? { width: tabBarWidthPercent }\n              : null,\n            indicatorContainerStyle,\n          ]}\n        >\n          {this.props.renderIndicator({\n            position,\n            layout,\n            navigationState,\n            jumpTo,\n            width: isWidthDynamic ? 'auto' : `${100 / routes.length}%`,\n            style: indicatorStyle,\n            getTabWidth: (i: number) =>\n              this.getComputedTabWidth(\n                i,\n                layout,\n                routes,\n                scrollEnabled,\n                tabWidths,\n                this.getFlattenedTabWidth(tabStyle)\n              ),\n          })}\n        </Animated.View>\n        <View style={styles.scroll}>\n          <Animated.ScrollView\n            horizontal\n            accessibilityRole=\"tablist\"\n            keyboardShouldPersistTaps=\"handled\"\n            scrollEnabled={scrollEnabled}\n            bounces={bounces}\n            alwaysBounceHorizontal={false}\n            scrollsToTop={false}\n            showsHorizontalScrollIndicator={false}\n            automaticallyAdjustContentInsets={false}\n            overScrollMode=\"never\"\n            contentContainerStyle={[\n              styles.tabContent,\n              scrollEnabled\n                ? { width: tabBarWidth || tabBarWidthPercent }\n                : styles.container,\n              contentContainerStyle,\n            ]}\n            scrollEventThrottle={16}\n            onScroll={Animated.event(\n              [\n                {\n                  nativeEvent: {\n                    contentOffset: { x: this.scrollAmount },\n                  },\n                },\n              ],\n              { useNativeDriver: true }\n            )}\n            ref={this.scrollViewRef}\n          >\n            {routes.map((route: T) => {\n              const props: TabBarItemProps<T> & { key: string } = {\n                key: route.key,\n                position: position,\n                route: route,\n                navigationState: navigationState,\n                getAccessibilityLabel: getAccessibilityLabel,\n                getAccessible: getAccessible,\n                getLabelText: getLabelText,\n                getTestID: getTestID,\n                renderBadge: renderBadge,\n                renderIcon: renderIcon,\n                renderLabel: renderLabel,\n                activeColor: activeColor,\n                inactiveColor: inactiveColor,\n                pressColor: pressColor,\n                pressOpacity: pressOpacity,\n                onLayout: isWidthDynamic\n                  ? (e) => {\n                      this.measuredTabWidths[route.key] =\n                        e.nativeEvent.layout.width;\n\n                      // When we have measured widths for all of the tabs, we should updates the state\n                      // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                      if (\n                        routes.every(\n                          (r) =>\n                            typeof this.measuredTabWidths[r.key] === 'number'\n                        )\n                      ) {\n                        this.setState({\n                          tabWidths: { ...this.measuredTabWidths },\n                        });\n                      }\n                    }\n                  : undefined,\n                onPress: () => {\n                  const event: Scene<T> & Event = {\n                    route,\n                    defaultPrevented: false,\n                    preventDefault: () => {\n                      event.defaultPrevented = true;\n                    },\n                  };\n\n                  onTabPress?.(event);\n\n                  if (event.defaultPrevented) {\n                    return;\n                  }\n\n                  this.props.jumpTo(route.key);\n                },\n                onLongPress: () => onTabLongPress?.({ route }),\n                labelStyle: labelStyle,\n                style: tabStyle,\n              };\n\n              return renderTabBarItem ? (\n                renderTabBarItem(props)\n              ) : (\n                <TabBarItem {...props} />\n              );\n            })}\n          </Animated.ScrollView>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}