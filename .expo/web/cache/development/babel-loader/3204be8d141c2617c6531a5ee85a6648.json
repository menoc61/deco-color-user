{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"state\", \"navigation\", \"descriptors\"],\n    _excluded2 = [\"navigationState\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\nexport default function TabBarTop(_ref) {\n  var _focusedOptions$tabBa, _focusedOptions$tabBa2;\n\n  var state = _ref.state,\n      navigation = _ref.navigation,\n      descriptors = _ref.descriptors,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var focusedOptions = descriptors[state.routes[state.index].key].options;\n  var activeColor = (_focusedOptions$tabBa = focusedOptions.tabBarActiveTintColor) !== null && _focusedOptions$tabBa !== void 0 ? _focusedOptions$tabBa : colors.text;\n  var inactiveColor = (_focusedOptions$tabBa2 = focusedOptions.tabBarInactiveTintColor) !== null && _focusedOptions$tabBa2 !== void 0 ? _focusedOptions$tabBa2 : Color(activeColor).alpha(0.5).rgb().string();\n  return React.createElement(TabBar, _extends({}, rest, {\n    navigationState: state,\n    scrollEnabled: focusedOptions.tabBarScrollEnabled,\n    bounces: focusedOptions.tabBarBounces,\n    activeColor: activeColor,\n    inactiveColor: inactiveColor,\n    pressColor: focusedOptions.tabBarPressColor,\n    pressOpacity: focusedOptions.tabBarPressOpacity,\n    tabStyle: focusedOptions.tabBarItemStyle,\n    indicatorStyle: [{\n      backgroundColor: colors.primary\n    }, focusedOptions.tabBarIndicatorStyle],\n    indicatorContainerStyle: focusedOptions.tabBarIndicatorContainerStyle,\n    contentContainerStyle: focusedOptions.tabBarContentContainerStyle,\n    style: [{\n      backgroundColor: colors.card\n    }, focusedOptions.tabBarStyle],\n    getAccessibilityLabel: function getAccessibilityLabel(_ref2) {\n      var route = _ref2.route;\n      return descriptors[route.key].options.tabBarAccessibilityLabel;\n    },\n    getTestID: function getTestID(_ref3) {\n      var route = _ref3.route;\n      return descriptors[route.key].options.tabBarTestID;\n    },\n    onTabPress: function onTabPress(_ref4) {\n      var route = _ref4.route,\n          preventDefault = _ref4.preventDefault;\n      var event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        preventDefault();\n      }\n    },\n    onTabLongPress: function onTabLongPress(_ref5) {\n      var route = _ref5.route;\n      return navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    },\n    renderIcon: function renderIcon(_ref6) {\n      var route = _ref6.route,\n          focused = _ref6.focused,\n          color = _ref6.color;\n      var options = descriptors[route.key].options;\n\n      if (options.tabBarShowIcon === false) {\n        return null;\n      }\n\n      if (options.tabBarIcon !== undefined) {\n        var icon = options.tabBarIcon({\n          focused: focused,\n          color: color\n        });\n        return React.createElement(View, {\n          style: [styles.icon, options.tabBarIconStyle]\n        }, icon);\n      }\n\n      return null;\n    },\n    renderLabel: function renderLabel(_ref7) {\n      var route = _ref7.route,\n          focused = _ref7.focused,\n          color = _ref7.color;\n      var options = descriptors[route.key].options;\n\n      if (options.tabBarShowLabel === false) {\n        return null;\n      }\n\n      var label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n\n      if (typeof label === 'string') {\n        return React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, options.tabBarLabelStyle],\n          allowFontScaling: options.tabBarAllowFontScaling\n        }, label);\n      }\n\n      return label({\n        focused: focused,\n        color: color\n      });\n    },\n    renderBadge: function renderBadge(_ref8) {\n      var _tabBarBadge;\n\n      var route = _ref8.route;\n      var tabBarBadge = descriptors[route.key].options.tabBarBadge;\n      return (_tabBarBadge = tabBarBadge === null || tabBarBadge === void 0 ? void 0 : tabBarBadge()) !== null && _tabBarBadge !== void 0 ? _tabBarBadge : null;\n    },\n    renderIndicator: function renderIndicator(_ref9) {\n      var state = _ref9.navigationState,\n          rest = _objectWithoutProperties(_ref9, _excluded2);\n\n      return focusedOptions.tabBarIndicator ? focusedOptions.tabBarIndicator(_objectSpread({\n        state: state\n      }, rest)) : React.createElement(TabBarIndicator, _extends({\n        navigationState: state\n      }, rest));\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"mappings":"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","names":["useTheme","Color","React","TabBar","TabBarIndicator","TabBarTop","state","navigation","descriptors","rest","colors","focusedOptions","routes","index","key","options","activeColor","tabBarActiveTintColor","text","inactiveColor","tabBarInactiveTintColor","alpha","rgb","string","navigationState","scrollEnabled","tabBarScrollEnabled","bounces","tabBarBounces","pressColor","tabBarPressColor","pressOpacity","tabBarPressOpacity","tabStyle","tabBarItemStyle","indicatorStyle","backgroundColor","primary","tabBarIndicatorStyle","indicatorContainerStyle","tabBarIndicatorContainerStyle","contentContainerStyle","tabBarContentContainerStyle","style","card","tabBarStyle","getAccessibilityLabel","route","tabBarAccessibilityLabel","getTestID","tabBarTestID","onTabPress","preventDefault","event","emit","type","target","canPreventDefault","defaultPrevented","onTabLongPress","renderIcon","focused","color","tabBarShowIcon","tabBarIcon","undefined","icon","View","styles","tabBarIconStyle","renderLabel","tabBarShowLabel","label","tabBarLabel","title","name","Text","tabBarLabelStyle","allowFontScaling","tabBarAllowFontScaling","renderBadge","tabBarBadge","renderIndicator","tabBarIndicator","StyleSheet","create","height","width","textAlign","textTransform","fontSize","margin"],"sources":["MaterialTopTabBar.tsx"],"sourcesContent":["import {\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  const activeColor = focusedOptions.tabBarActiveTintColor ?? colors.text;\n  const inactiveColor =\n    focusedOptions.tabBarInactiveTintColor ??\n    Color(activeColor).alpha(0.5).rgb().string();\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      scrollEnabled={focusedOptions.tabBarScrollEnabled}\n      bounces={focusedOptions.tabBarBounces}\n      activeColor={activeColor}\n      inactiveColor={inactiveColor}\n      pressColor={focusedOptions.tabBarPressColor}\n      pressOpacity={focusedOptions.tabBarPressOpacity}\n      tabStyle={focusedOptions.tabBarItemStyle}\n      indicatorStyle={[\n        { backgroundColor: colors.primary },\n        focusedOptions.tabBarIndicatorStyle,\n      ]}\n      indicatorContainerStyle={focusedOptions.tabBarIndicatorContainerStyle}\n      contentContainerStyle={focusedOptions.tabBarContentContainerStyle}\n      style={[{ backgroundColor: colors.card }, focusedOptions.tabBarStyle]}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowIcon === false) {\n          return null;\n        }\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return (\n            <View style={[styles.icon, options.tabBarIconStyle]}>{icon}</View>\n          );\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowLabel === false) {\n          return null;\n        }\n\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, options.tabBarLabelStyle]}\n              allowFontScaling={options.tabBarAllowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n      renderBadge={({ route }) => {\n        const { tabBarBadge } = descriptors[route.key].options;\n\n        return tabBarBadge?.() ?? null;\n      }}\n      renderIndicator={({ navigationState: state, ...rest }) => {\n        return focusedOptions.tabBarIndicator ? (\n          focusedOptions.tabBarIndicator({\n            state: state as TabNavigationState<ParamListBase>,\n            ...rest,\n          })\n        ) : (\n          <TabBarIndicator navigationState={state} {...rest} />\n        );\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}